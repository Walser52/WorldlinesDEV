width = "25mm",
image = spec_image(linkerimages, 200, 100),
latex_valign = "m")
knitr::asis_output(str_replace(tmp, "sigma", "$\\\\left(\\\\frac{\\\\sigma}{{S{\\\\cdot}m^{-1}}}\\\\right)$"))
colnames(tbl_linker)
colnames(linkersdt) <- sub("^linkersdt....", "", colnames(linkersdt))
colnames(tbl_linker) <- sub("^linkersdt....", "", colnames(linkersdt))
linkersdt <- read.csv("tables/linkers.csv")
linkersdt <- linkersdt[1:10,][order(desc(linkersdt[1:10,2])), ]
#linkerimages <- paste("images/linkers/", linkersdt[1:10,"imagepath"], sep = "") #Select top 10 linkers (column 4)
linkerimages <-linkersdt[1:10,"imagepath"] #Select top 10 linkers (column 4)
#________________________
image_widths <- numeric()
image_heights <- numeric()
# Loop through the image file paths and extract dimensions
for (path in linkerimages) {
image <- image_read(path)
dimensions <- image_info(image)
# Extract width and height and append to vectors
image_widths <- c(image_widths, dimensions$width)
image_heights <- c(image_heights, dimensions$height)
}
#=====================
#linkerimages <- linkersdt[1:10,"imagepath"]
linkersdt <- linkersdt[1:10, !names(linkersdt) %in% c("imagepath")]
linkers_list <- split(linkersdt$info.mofid.smiles_linkersList_Hi, linkersdt$IUPACname)
tbl_linker <- data.frame(mol = "",
linkersdt[, "IUPACname"],
linkersdt[, "info.lcd"],
linkersdt[, "info.pld"],
linkersdt[, "outputs.pbe.bandgap"],
linkersdt[, "sigma1_traceAvlog10"],
linkersdt[, "Hi.Lo"],
linkersdt[, "Total"]
)
colnames(tbl_linker) <- sub("^linkersdt....", "", colnames(linkersdt))
linkersdt <- read.csv("tables/linkers.csv")
linkersdt <- linkersdt[1:10,][order(desc(linkersdt[1:10,2])), ]
#linkerimages <- paste("images/linkers/", linkersdt[1:10,"imagepath"], sep = "") #Select top 10 linkers (column 4)
linkerimages <-linkersdt[1:10,"imagepath"] #Select top 10 linkers (column 4)
#________________________
image_widths <- numeric()
image_heights <- numeric()
# Loop through the image file paths and extract dimensions
for (path in linkerimages) {
image <- image_read(path)
dimensions <- image_info(image)
# Extract width and height and append to vectors
image_widths <- c(image_widths, dimensions$width)
image_heights <- c(image_heights, dimensions$height)
}
#=====================
#linkerimages <- linkersdt[1:10,"imagepath"]
linkersdt <- linkersdt[1:10, !names(linkersdt) %in% c("imagepath")]
linkers_list <- split(linkersdt$info.mofid.smiles_linkersList_Hi, linkersdt$IUPACname)
tbl_linker <- data.frame(mol = "",
linkersdt[, "IUPACname"],
linkersdt[, "info.lcd"],
linkersdt[, "info.pld"],
linkersdt[, "outputs.pbe.bandgap"],
linkersdt[, "sigma1_traceAvlog10"],
linkersdt[, "Hi.Lo"],
linkersdt[, "Total"]
)
colnames(tbl_linker) <- sub("^linkersdt....", "", colnames(tbl_linker))
#____Rename columns_____________
column_mapping <- c("info.lcd" = "LCD (Å)", "info.pld" = "PLD (Å)",
"outputs.pbe.bandgap" = "Bandgap (eV)", "sigma1_traceAvlog10" = "logsigma",
"Hi.Lo" = "Hi:Lo", "IUPACname" = "IUPAC Name")
renamer <- function(old_name) {
if (old_name %in% names(column_mapping)) {
return(column_mapping[old_name])
} else {
return(old_name)
}
}
colnames(tbl_linker) <- sapply(colnames(tbl_linker), renamer )
tmp  <- tbl_linker %>%
kbl(booktabs = T,
align = 'clrrrrrr', digits = 2,
#linesep = "",
caption = "---Best linkers"
#,valign = 't'
) %>%
kable_paper(full_width = F) %>%
column_spec(1,
width = "25mm",
image = spec_image(linkerimages, 200, 100),
latex_valign = "m")
knitr::asis_output(str_replace(tmp, "sigma", "$\\\\left(\\\\frac{\\\\sigma}{{S{\\\\cdot}m^{-1}}}\\\\right)$"))
linkersdt <- read.csv("tables/linkers.csv")
linkersdt <- linkersdt[1:10,][order(desc(linkersdt[1:10,2])), ]
#linkerimages <- paste("images/linkers/", linkersdt[1:10,"imagepath"], sep = "") #Select top 10 linkers (column 4)
linkerimages <-linkersdt[1:10,"imagepath"] #Select top 10 linkers (column 4)
#________________________
image_widths <- numeric()
image_heights <- numeric()
# Loop through the image file paths and extract dimensions
for (path in linkerimages) {
image <- image_read(path)
dimensions <- image_info(image)
# Extract width and height and append to vectors
image_widths <- c(image_widths, dimensions$width)
image_heights <- c(image_heights, dimensions$height)
}
#=====================
#linkerimages <- linkersdt[1:10,"imagepath"]
linkersdt <- linkersdt[1:10, !names(linkersdt) %in% c("imagepath")]
linkers_list <- split(linkersdt$info.mofid.smiles_linkersList_Hi, linkersdt$IUPACname)
tbl_linker <- data.frame(mol = "",
linkersdt[, "IUPACname"],
linkersdt[, "info.lcd"],
linkersdt[, "info.pld"],
linkersdt[, "outputs.pbe.bandgap"],
linkersdt[, "sigma1_traceAvlog10"],
linkersdt[, "Hi.Lo"],
linkersdt[, "Total"]
)
colnames(tbl_linker) <- sub("^linkersdt....", "", colnames(tbl_linker))
colnames(tbl_linker) <- sub("..", "", colnames(tbl_linker))
#____Rename columns_____________
column_mapping <- c("info.lcd" = "LCD (Å)", "info.pld" = "PLD (Å)",
"outputs.pbe.bandgap" = "Bandgap (eV)", "sigma1_traceAvlog10" = "logsigma",
"Hi.Lo" = "Hi:Lo", "IUPACname" = "IUPAC Name")
renamer <- function(old_name) {
if (old_name %in% names(column_mapping)) {
return(column_mapping[old_name])
} else {
return(old_name)
}
}
colnames(tbl_linker) <- sapply(colnames(tbl_linker), renamer )
tmp  <- tbl_linker %>%
kbl(booktabs = T,
align = 'clrrrrrr', digits = 2,
#linesep = "",
caption = "---Best linkers"
#,valign = 't'
) %>%
kable_paper(full_width = F) %>%
column_spec(1,
width = "25mm",
image = spec_image(linkerimages, 200, 100),
latex_valign = "m")
knitr::asis_output(str_replace(tmp, "sigma", "$\\\\left(\\\\frac{\\\\sigma}{{S{\\\\cdot}m^{-1}}}\\\\right)$"))
linkersdt[, c("IUPACname", "info.lcd")]
tbl_linker <- linkersdt[, c("IUPACname", "info.lcd", "info.pld", "outputs.pbe.bandgap", "sigma1_traceAvlog10", "Hi.Lo", "Total")]
tbl_linker
typeof(tbl_linker)
class(tbl_linker)
data.frame("", tbl_linker)
tbl_linker <- linkersdt[, c("IUPACname", "info.lcd", "info.pld", "outputs.pbe.bandgap", "sigma1_traceAvlog10", "Hi.Lo", "Total")]
#tbl_linker[, "mol"] <- NA
tbl_linker data.frame("", tbl_linker)
#tbl_linker[, "mol"] <- NA
tbl_linker <- data.frame("", tbl_linker)
tbl_linker
colnames(tbl_linker)
#____Rename columns_____________
column_mapping <- c("info.lcd" = "LCD (Å)", "info.pld" = "PLD (Å)",
"outputs.pbe.bandgap" = "Bandgap (eV)", "sigma1_traceAvlog10" = "logsigma",
"Hi.Lo" = "Hi:Lo", "IUPACname" = "IUPAC Name", "X.." = "")
renamer <- function(old_name) {
if (old_name %in% names(column_mapping)) {
return(column_mapping[old_name])
} else {
return(old_name)
}
}
colnames(tbl_linker) <- sapply(colnames(tbl_linker), renamer )
colnames(tbl_linker)
tbl_linker <- linkersdt[, c("IUPACname", "info.lcd", "info.pld", "outputs.pbe.bandgap", "sigma1_traceAvlog10", "Hi.Lo", "Total")]
#tbl_linker[, "mol"] <- NA
tbl_linker <- data.frame(mol = "", tbl_linker)
tbl_linker$mol
linkersdt <- read.csv("tables/linkers.csv")
linkersdt <- linkersdt[1:10,][order(desc(linkersdt[1:10,2])), ]
#linkerimages <- paste("images/linkers/", linkersdt[1:10,"imagepath"], sep = "") #Select top 10 linkers (column 4)
linkerimages <-linkersdt[1:10,"imagepath"] #Select top 10 linkers (column 4)
#________________________
image_widths <- numeric()
image_heights <- numeric()
# Loop through the image file paths and extract dimensions
for (path in linkerimages) {
image <- image_read(path)
dimensions <- image_info(image)
# Extract width and height and append to vectors
image_widths <- c(image_widths, dimensions$width)
image_heights <- c(image_heights, dimensions$height)
}
#=====================
#linkerimages <- linkersdt[1:10,"imagepath"]
linkersdt <- linkersdt[1:10, !names(linkersdt) %in% c("imagepath")]
linkers_list <- split(linkersdt$info.mofid.smiles_linkersList_Hi, linkersdt$IUPACname)
linkersdt["High:Low (Total)"] <- paste(linkersdt["Hi.Lo"], "(", linkersdt["Total"], ")", sep = "")
tbl_linker <- linkersdt[, c("IUPACname",
"info.lcd",
#"info.pld",
"outputs.pbe.bandgap",
"sigma1_traceAvlog10",
"High:Low (Total)")]
#tbl_linker[, "mol"] <- NA
tbl_linker <- data.frame(mol = "", tbl_linker)
#____Rename columns_____________
column_mapping <- c("info.lcd" = "LCD (Å)", "info.pld" = "PLD (Å)",
"outputs.pbe.bandgap" = "Bandgap (eV)", "sigma1_traceAvlog10" = "logsigma",
#"Hi.Lo" = "Hi:Lo",
"IUPACname" = "IUPAC Name", "mol" = "")
renamer <- function(old_name) {
if (old_name %in% names(column_mapping)) {
return(column_mapping[old_name])
} else {
return(old_name)
}
}
colnames(tbl_linker) <- sapply(colnames(tbl_linker), renamer )
tmp  <- tbl_linker %>%
kbl(booktabs = T,
row.names = FALSE,
align = 'clrrrrr',
digits = 2,
#linesep = "",
caption = "---Best linkers"
#,valign = 't'
) %>%
kable_paper(full_width = F) %>%
column_spec(1,
width = "25mm",
image = spec_image(linkerimages, 200, 100),
latex_valign = "m")
knitr::asis_output(str_replace(tmp, "sigma", "$\\\\left(\\\\frac{\\\\sigma}{{S{\\\\cdot}m^{-1}}}\\\\right)$"))
linkersdt <- read.csv("tables/linkers.csv")
linkersdt <- linkersdt[1:10,][order(desc(linkersdt[1:10,2])), ]
#linkerimages <- paste("images/linkers/", linkersdt[1:10,"imagepath"], sep = "") #Select top 10 linkers (column 4)
linkerimages <-linkersdt[1:10,"imagepath"] #Select top 10 linkers (column 4)
#________________________
image_widths <- numeric()
image_heights <- numeric()
# Loop through the image file paths and extract dimensions
for (path in linkerimages) {
image <- image_read(path)
dimensions <- image_info(image)
# Extract width and height and append to vectors
image_widths <- c(image_widths, dimensions$width)
image_heights <- c(image_heights, dimensions$height)
}
#=====================
linkersdt <- linkersdt[1:10, !names(linkersdt) %in% c("imagepath")]
linkers_list <- split(linkersdt$info.mofid.smiles_linkersList_Hi, linkersdt$IUPACname)
linkersdt["High:Low (Total)"] <- paste(linkersdt$Hi.Lo, "(", linkersdt$Total, ")", sep = "")
tbl_linker <- linkersdt[, c("IUPACname",
"info.lcd",
#"info.pld",
"outputs.pbe.bandgap",
"sigma1_traceAvlog10",
"High:Low (Total)")]
#tbl_linker[, "mol"] <- NA
tbl_linker <- data.frame(mol = "", tbl_linker)
#____Rename columns_____________
column_mapping <- c("info.lcd" = "LCD (Å)", "info.pld" = "PLD (Å)",
"outputs.pbe.bandgap" = "Bandgap (eV)", "sigma1_traceAvlog10" = "logsigma",
#"Hi.Lo" = "Hi:Lo",
"IUPACname" = "IUPAC Name", "mol" = "")
renamer <- function(old_name) {
if (old_name %in% names(column_mapping)) {
return(column_mapping[old_name])
} else {
return(old_name)
}
}
colnames(tbl_linker) <- sapply(colnames(tbl_linker), renamer )
tmp  <- tbl_linker %>%
kbl(booktabs = T,
row.names = FALSE,
align = 'clrrrrr',
digits = 2,
#linesep = "",
caption = "---Best linkers"
#,valign = 't'
) %>%
kable_paper(full_width = F) %>%
column_spec(1,
width = "25mm",
image = spec_image(linkerimages, 200, 100),
latex_valign = "m")
knitr::asis_output(str_replace(tmp, "sigma", "$\\\\left(\\\\frac{\\\\sigma}{{S{\\\\cdot}m^{-1}}}\\\\right)$"))
round
linkersdt <- read.csv("tables/linkers.csv")
linkersdt <- linkersdt[1:10,][order(desc(linkersdt[1:10,2])), ]
#linkerimages <- paste("images/linkers/", linkersdt[1:10,"imagepath"], sep = "") #Select top 10 linkers (column 4)
linkerimages <-linkersdt[1:10,"imagepath"] #Select top 10 linkers (column 4)
#________________________
image_widths <- numeric()
image_heights <- numeric()
# Loop through the image file paths and extract dimensions
for (path in linkerimages) {
image <- image_read(path)
dimensions <- image_info(image)
# Extract width and height and append to vectors
image_widths <- c(image_widths, dimensions$width)
image_heights <- c(image_heights, dimensions$height)
}
#=====================
linkersdt <- linkersdt[1:10, !names(linkersdt) %in% c("imagepath")]
linkers_list <- split(linkersdt$info.mofid.smiles_linkersList_Hi, linkersdt$IUPACname)
linkersdt["High:Low (Total)"] <- paste(round(linkersdt$Hi.Lo,2), "(", linkersdt$Total, ")", sep = "")
tbl_linker <- linkersdt[, c("IUPACname",
"info.lcd",
#"info.pld",
"outputs.pbe.bandgap",
"sigma1_traceAvlog10",
"High:Low (Total)")]
#tbl_linker[, "mol"] <- NA
tbl_linker <- data.frame(mol = "", tbl_linker)
#____Rename columns_____________
column_mapping <- c("info.lcd" = "LCD (Å)", "info.pld" = "PLD (Å)",
"outputs.pbe.bandgap" = "Bandgap (eV)", "sigma1_traceAvlog10" = "logsigma",
#"Hi.Lo" = "Hi:Lo",
"IUPACname" = "IUPAC Name", "mol" = "")
renamer <- function(old_name) {
if (old_name %in% names(column_mapping)) {
return(column_mapping[old_name])
} else {
return(old_name)
}
}
colnames(tbl_linker) <- sapply(colnames(tbl_linker), renamer )
tmp  <- tbl_linker %>%
kbl(booktabs = T,
row.names = FALSE,
align = 'clrrrrr',
digits = 2,
#linesep = "",
caption = "---Best linkers"
#,valign = 't'
) %>%
kable_paper(full_width = F) %>%
column_spec(1,
width = "25mm",
image = spec_image(linkerimages, 200, 100),
latex_valign = "m")
knitr::asis_output(str_replace(tmp, "sigma", "$\\\\left(\\\\frac{\\\\sigma}{{S{\\\\cdot}m^{-1}}}\\\\right)$"))
linkersdt <- read.csv("tables/linkers.csv")
linkersdt <- linkersdt[1:10,][order(desc(linkersdt[1:10,2])), ]
#linkerimages <- paste("images/linkers/", linkersdt[1:10,"imagepath"], sep = "") #Select top 10 linkers (column 4)
linkerimages <-linkersdt[1:10,"imagepath"] #Select top 10 linkers (column 4)
#________________________
image_widths <- numeric()
image_heights <- numeric()
# Loop through the image file paths and extract dimensions
for (path in linkerimages) {
image <- image_read(path)
dimensions <- image_info(image)
# Extract width and height and append to vectors
image_widths <- c(image_widths, dimensions$width)
image_heights <- c(image_heights, dimensions$height)
}
linkersdt <- linkersdt[1:10, !names(linkersdt) %in% c("imagepath")]
linkers_list <- split(linkersdt$info.mofid.smiles_linkersList_Hi, linkersdt$IUPACname)
linkersdt["HighLowTotal"] <- paste(round(linkersdt$Hi.Lo,2), "(", linkersdt$Total, ")", sep = "")
tbl_linker <- linkersdt[, c("IUPACname",
"info.lcd",
#"info.pld",
"outputs.pbe.bandgap",
"sigma1_traceAvlog10",
"High:Low (Total)")]
metalsdt
knitr::opts_chunk$set(echo = TRUE)
plotvars <- c("Ecell_V", "I_mA", "EnergyCharge_W_h")
plts <- c()
for (var in plotvars){
# p <- hddf %>%
#     ggplot( aes(x=time_s, y=I_mA)) +
#     geom_area(fill="#69b3a2", alpha=0.5) +
#     geom_line(color="#69b3a2") +
#     ylab(var) +
#     theme_ipsum()
plts <- append(plts, var)
}
for (var in plotvars){print("a")
print(var)
}
plotvars <- c("Ecell_V", "I_mA", "EnergyCharge_W_h")
plts <- c()
# for (var in plotvars){
#     # p <- hddf %>%
#     #     ggplot( aes(x=time_s, y=I_mA)) +
#     #     geom_area(fill="#69b3a2", alpha=0.5) +
#     #     geom_line(color="#69b3a2") +
#     #     ylab(var) +
#     #     theme_ipsum()
#
#     plts <- append(plts, var)
# }
for (var in plotvars){
print("a")
print(var)
}
plotvars <- c("line1", "line2", "line3")
plts <- c()
for (var in plotvars){
print("a")
print(var)
}
vars <- c("line1", "line2", "line3")
plts <- c()
for (var in vars){
print("a")
print(var)
}
vars <- c("line1", "line2", "line3")
plts <- c()
for (var in vars){
print("a")
print(var)
}
library(tufte)
library(tidyverse)
library(kableExtra)
library(gt)
library(gtsummary)
library(ComplexHeatmap)
library(circlize)
library(RColorBrewer)
library(gtExtras)
library(DiagrammeR)
library(magick)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
#Global data read.
md <- read_csv('../CodesNData/Data/DataFrameComplete.csv')
output = 'docx'
linkers2metaldf <- read.csv("tables/metal2linker.csv", skip = 1, check.names = FALSE)
groups <- read.csv("tables/metal2linker.csv", nrows = 1)
text_only <- gsub("\\.\\d+$", "", colnames(groups))
frequency_table <- table(text_only)
unique_elements <- unique(text_only)
of <- frequency_table[unique_elements]
names(of)[1] <- " "
names(linkers2metaldf)[1] <- "Metal"
linkers2metaldf %>%
kbl(longtable = T, booktabs = T, linesep = "",
caption = r"(\textit{Mean log conductivity for common metals and linkers pairings with number of samples indicated inside parentheses.})" )  %>%
add_header_above(of) %>%
row_spec(0, angle = 90) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%  landscape()
names(linkers2metaldf)
linkers2metaldf <- read.csv("tables/metal2linker.csv", skip = 1, check.names = FALSE)
names(linkers2metaldf)
groups <- read.csv("tables/metal2linker.csv", nrows = 1)
groups
names(groups)
text_only <- gsub("\\.\\d+$", "", colnames(groups))
text_only
names(text_only)
text_only
colnames(text_only)
rownames(text_only)
text_only
gsub(".", " ", text_only)
gsub("\\.", " ", text_only)
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
cmdstanr::install_cmdstan()
install.packages(c("coda","mvtnorm","devtools","loo","dagitty","shape"))
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty", "shape"))
rbern(200)
library(rethinking)
devtools::install_github("rmcelreath/rethinking")
library(rethinking)
rbern(200)
setwd("~/Documents/GIK - R&D/Personal - Papers and Reports/__Books/Worldlines")
library(sf)
install.packages("sf")
library(sf)
install.packages("units")
library(sf)
library(sf)
install.packages("sf")
library(sf)
fname <- system.file("shape/nc.shp", package="sf")
fname
fname
nc <- st_read(fname)
nc
par(mar = c(0,0,1,0))
plot(nc[1], reset = FALSE) # reset = FALSE: we want to add to a plot with a legend
plot(nc[1,1], col = 'grey', add = TRUE)
root <- r("/home/fes33/Documents/GIK - R&D/Personal - Papers and Reports/__SampleData/natural_earth_vector")
root <- r"(/home/fes33/Documents/GIK - R&D/Personal - Papers and Reports/__SampleData/natural_earth_vector)"
base <- r"(/home/fes33/Documents/GIK - R&D/Personal - Papers and Reports/__SampleData/natural_earth_vector)"
base + "se"
paste0(base, "set")
file.path(base, "ne_10m_admin_0_antarctic_claim_limit_lines.shp")
st_read(file)
file <- file.path(base, "ne_10m_admin_0_antarctic_claim_limit_lines.shp")
st_read(file)
#file <- file.path(base, "ne_10m_admin_0_antarctic_claim_limit_lines.shp")
file <- paste0(base, ne_10m_admin_0_antarctic_claim_limit_lines.shp)
#file <- file.path(base, "ne_10m_admin_0_antarctic_claim_limit_lines.shp")
file <- paste0(base, "ne_10m_admin_0_antarctic_claim_limit_lines.shp")
st_read(file)
st_read(r"(/home/fes33/Documents/GIK - R&D/Personal - Papers and Reports/__SampleData/natural_earth_vector/ne_10m_admin_0_antarctic_claim_limit_lines.shp)")
file <- file.path(base, "10m_cultural/ne_10m_admin_0_antarctic_claim_limit_lines.shp")
st_read(file)
nc <- st_read(file)
plot(nc[1], reset = FALSE) # reset = FALSE: we want to add to a plot with a legend
par(mar = c(0,0,1,0))
plot(nc[1], reset = FALSE) # reset = FALSE: we want to add to a plot with a legend
plot(nc[1,1], col = 'grey', add = TRUE)
plot(nc[0], reset = FALSE) # reset = FALSE: we want to add to a plot with a legend
par(mar = c(0,0,1,0))
nc
View(nc)
